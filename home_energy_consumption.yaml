substitutions:
  # Device informations
  device_name: "powermonitor"
  gas_imp_value: '10' # impulses / m³ 

esphome:
  name: powermonitor

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino
    
logger:
  level: debug
    
ota:
  password: !secret ota_password

wifi:
  networks:
    - ssid: !secret iot_wifi_ssid
      password: !secret iot_wifi_password
      manual_ip:
        static_ip: !secret powermonitor
        gateway: 192.168.178.1
        subnet: 255.255.255.0
    
# Enable Home Assistant API
api:
  encryption:
    key: "something"

globals:
  - id: total_gas_pulses
    type: int
    restore_value: false # if set to false, the value will be 0 at reboot
    initial_value: '0'   
  - id: buzzer_active
    type: bool
    initial_value: 'false'  
    
sensor:
  - platform: ntc
    sensor: ${device_name}_temp_resistance_sensor
    name: "${device_name} ntc Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3950
      reference_temperature: 15.3°C
      reference_resistance: 35.769kOhm
  - platform: resistance
    id: ${device_name}_temp_resistance_sensor
    sensor: ${device_name}_temp_ntc_reading
    configuration: DOWNSTREAM
    resistor: 10kOhm
    #internal: true   #todo
    reference_voltage:  3.3V
 
  ##############################
  ###############   Read Current
  ##############################
  - platform: ct_clamp
    sensor: ${device_name}_ct1_sensor
    name: "${device_name} ct1 Measured Current"    # This first sensor gets the Amps, note that is set to internal only.
    id: ${device_name}_ct1_measured_current
    #internal: true
    update_interval: 5s    # todo
    accuracy_decimals: 3 
    filters:
      - calibrate_linear:  # I'm pulling approx 28A
          - 0.012 -> 0
          #- 0.048 -> 0.34
          #- 0.75 -> 8.5
          - 0.883 -> 11.5
  - platform: ct_clamp
    sensor: ${device_name}_ct2_sensor
    name: "${device_name} ct2 Measured Current"                
    id: ${device_name}_ct2_measured_current
    #internal: true
    update_interval: 5s
    accuracy_decimals: 3
    filters:
      - calibrate_linear:  
          - 0.012 -> 0      
          #- 0.048 -> 0.34
          #- 0.75 -> 8.5
          - 0.883 -> 11.5
  - platform: ct_clamp
    sensor: ${device_name}_ct3_sensor
    name: "${device_name} ct3 Measured Current"                
    id: ${device_name}_ct3_measured_current
    #internal: true
    update_interval: 5s
    accuracy_decimals: 3
    filters:
      - calibrate_linear: 
          - 0.012 -> 0
          #- 0.050 -> 0.34
          #- 0.75 -> 8.5  
          - 0.887 -> 11.5

  ##############################
  ###############   Set Current
  ##############################
  - platform: template
    name: "${device_name} L1 Current"  # if the reading is below 0.1A then it reports 0, keeps your 0 at 0
    id: ${device_name}_11_current
    lambda: |-
      if (id(${device_name}_ct1_measured_current).state > 0.03){
        return (id(${device_name}_ct1_measured_current).state);
      } else {
        return 0.0;
      }
    device_class: current
    accuracy_decimals: 2
    unit_of_measurement: A
  - platform: template
    name: "${device_name} L2 Current"  
    id: ${device_name}_12_current
    lambda: |-
      if (id(${device_name}_ct2_measured_current).state > 0.03){
        return (id(${device_name}_ct2_measured_current).state);
      } else {
        return 0.0;
      }
    device_class: current
    accuracy_decimals: 2
    unit_of_measurement: A
  - platform: template
    name: "${device_name} L3 Current"  
    id: ${device_name}_13_current
    lambda: |-
      if (id(${device_name}_ct3_measured_current).state > 0.03){
        return (id(${device_name}_ct3_measured_current).state);
      } else {
        return 0.0;
      }
    device_class: current
    accuracy_decimals: 2
    unit_of_measurement: A

  ##############################
  ###############   Watts
  ##############################
  - platform: template
    name: "${device_name} L1 Watts"  # This sensor converts the Amps to Watts 
    id: ${device_name}_ct1_watts
    lambda: |-
      return id(${device_name}_11_current).state * 230;
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: W
  - platform: template
    name: "${device_name} L2 Watts"  # This sensor converts the Amps to Watts 
    id: ${device_name}_ct2_watts
    lambda: |-
      return id(${device_name}_12_current).state * 230;
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: W
  - platform: template
    name: "${device_name} L3 Watts"  # This sensor converts the Amps to Watts 
    id: ${device_name}_ct3_watts
    lambda: |-
      return id(${device_name}_13_current).state * 230;
    accuracy_decimals: 2
    device_class: power
    unit_of_measurement: W
    
  ############################## 
  ###############   daily_energy  
  ##############################  
  - platform: total_daily_energy        # This sensor will give you a Daily kW reading
    name: "${device_name} L1 daily energy total"
    unit_of_measurement: 'kWh'   # Ah  kWh
    accuracy_decimals: 2
    power_id: ${device_name}_ct1_watts    #todo
    filters:
      - multiply: 0.001
    device_class: energy
    state_class: total_increasing
  - platform: total_daily_energy
    name: "${device_name} L2 daily energy total"
    unit_of_measurement: 'kWh'   # Ah  kWh
    accuracy_decimals: 2
    power_id: ${device_name}_ct2_watts    #todo
    filters:
      - multiply: 0.001
    device_class: energy
    state_class: total_increasing
  - platform: total_daily_energy
    name: "${device_name} L3 daily energy total"
    unit_of_measurement: 'kWh'   # Ah  kWh
    accuracy_decimals: 2
    power_id: ${device_name}_ct3_watts    #todo
    filters:
      - multiply: 0.001
    device_class: energy
    state_class: total_increasing
  
  - platform: adc
    pin: 3      # ADC1_CH2
    id: ${device_name}_ct1_sensor
    attenuation: auto   #  11db
    accuracy_decimals: 5
  - platform: adc
    pin: 5      # ADC1_CH4
    id: ${device_name}_ct2_sensor
    attenuation: auto
    accuracy_decimals: 5
  - platform: adc
    pin: 7      # ADC1_CH6
    id: ${device_name}_ct3_sensor  
    attenuation: auto
    accuracy_decimals: 5
    
  - platform: adc
    id: ${device_name}_temp_ntc_reading
    pin: 6     # ADC1_CH5
    update_interval: 5s
    attenuation: auto

  ##############################
  ################  Gas used
  ##############################
  # this sensor is counting the pulses, if your gas meter says 1 imp = 0,01m3 then the 0.001 below is right
  - platform: template
    name: "${device_name} Total Gas Pulses"
    device_class: gas
    state_class: "total_increasing"
    lambda: |-
      return id(total_gas_pulses);
      
  # this sensor is using the same logic, just calculating in kWh
  - platform: template
    name: "${device_name} Gasverbrauch-kWh"
    device_class: gas
    unit_of_measurement: "kWh"
    state_class: "total_increasing"
    update_interval: 60s
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_gas_pulses) * 0.1;
      
  - platform: template
    name: "${device_name} Gas used m³"
    device_class: gas
    unit_of_measurement: "m³"
    state_class: "total_increasing"
    icon: mdi:meter-gas-outline
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      return id(total_gas_pulses) * 0.01;
      
  ##############################
  ################  Uptime sensor.
  ##############################
  - platform: uptime   # not used
    name: ${device_name} Uptime
    id: "${device_name}_uptime"
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    id: "${device_name}_wifi_signal"
    update_interval: 15s
    
binary_sensor:
  - platform: status
    name: "${device_name} Status" 
  ############
  - platform: gpio
    id: internal_pulse_counter
    name: "${device_name} Live-Impuls"
    pin:
      number: GPIO12             
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10s
    on_press:
      then:
        - lambda: id(total_gas_pulses) += 1;
        - output.turn_off: ${device_name}_led  
    on_release:
      then:
        - output.turn_on: ${device_name}_led
        
  ##############################
  ################  rf_receiver
  ##############################
  - platform: template
    device_class: safety
    name: 'Water leak'
    id: 'water_leak_alert'
    #lambda: |-
    #  if(id(rf_security_leak_detector_1).state || id(rf_security_leak_detector_2).state) {
    #    return true;
    #  } else {
    #    return false;
    #  }
    
  #*************************************************
  #       DOORS
  #************************************************* 
  - platform: template
    name: "Front Door"
    device_class: door
    id: rf_security_front_door
  - platform: template
    name: "Back Door"
    device_class: door
    id: rf_security_back_door
    
  #***************************************************
  #        MOTION
  #***************************************************
  - platform: template
    name: "Motion"
    device_class: motion
    id: rf_security_motion

  - platform: remote_receiver               # smoke
    name: "rf_security Smoke_Detector"
    id: rf_security_smoke
    device_class: smoke
    rc_switch_raw:
      code: '101010101110110110111001'   
      protocol: 1
    filters:
      - delayed_off: 100ms
    on_press:
      then:
        - script.execute: alarm_detection


switch:
  - platform: shutdown
    name: "${device_name} Shutdown"
    id: ${device_name}_shutdown     
    
  #***************************************************
  #        Siren
  #***************************************************

  - platform: template
    name: "rf_security wired siren active"
    id : rf_security_wired_siren_active  
    icon : "mdi:volume-plus"
    optimistic: True
      
  - platform: template
    name: "reset wired siren"
    id: rf_security_reset_wired_siren_btn
    turn_on_action:
      - lambda: |-
          id(water_leak_alert).publish_state(false);
      - globals.set:
          id: buzzer_active
          value: 'false'
          
status_led:
  pin:
    number: GPIO15           
    inverted: false   
 
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/London
    
text_sensor:
  - platform: template
    name: "System Time (SNTP)"
    #lambda: |-
    #  auto time_str = id(sntp_time).now().strftime("%H:%M:%S - %d-%m-%Y");
    #  return { time_str };
    lambda: |-
      char str[25];
      time_t currTime = id(sntp_time).now().timestamp;
      //strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      strftime(str, sizeof(str), "%Y-%m-%dT %H:%M:%S.000Z", gmtime(&currTime));
      return (std::string) str;
      
  - platform: template
    name: "Latest Code"
    id: rf_code
      
# Optional: flashing LED by receiving the signal from the gas meterr
output:
  - platform: gpio
    pin: GPIO11       
    #inverted: true   
    id: ${device_name}_led
    
  - platform: gpio
    pin: GPIO17       # TODO
    id: rf_security_passive_buzzer

script:
  - id: alarm_detection
    mode: single
    then:
      while:
        condition:
          - lambda: |-
              return id(buzzer_active || water_leak_alert);
        then:
          - output.turn_on: rf_security_passive_buzzer
          - delay: 100ms 
          - output.turn_off: rf_security_passive_buzzer
          - delay: 100ms
       
##############################
################  rf - sensor.
##############################
remote_receiver:
  pin: 
    number: GPIO18      
    mode: INPUT_PULLUP 
    inverted: true
  dump: rc_switch
  tolerance: 50%
  filter: 50us
  idle: 4ms
  buffer_size: 4kb
  
  on_rc_switch:
    then: 
      lambda: |-
        if (x.code == 6037913){
          id(water_leak_alert).publish_state(true);
          id(buzzer_active)= true;
          id(alarm_detection).execute();
        }
        if (x.code == 16712707){
          id(rf_security_front_door).publish_state(true);
          id(buzzer_active)= true;
          id(alarm_detection).execute();
        }
        if (x.code == 16712719){
          id(rf_security_front_door).publish_state(false);
          id(buzzer_active)= false;
        }
        if (x.code == 13107459){
          id(rf_security_back_door).publish_state(true);
          id(buzzer_active)= true;
          id(alarm_detection).execute();
        }
        if (x.code == 13107471){
          id(rf_security_back_door).publish_state(false);
          id(buzzer_active)= false;
        }
        if (x.code == 1797004){
          id(rf_security_motion).publish_state(true);
          id(buzzer_active)= true;
          id(alarm_detection).execute();
        }
        if (x.code == 1796992){
          id(rf_security_motion).publish_state(false);
          id(buzzer_active)= false;
        }
      # text_sensor.template.publish:
        # id: rf_code
        # state: !lambda 'char buffer [10];return itoa(x.code,buffer,16);'
